name: Test Multi-Platform Build
on:
  push:
    branches:
      - 'feature/add-multiplatform-build'
  pull_request:
    branches:
      - 'feature/add-multiplatform-build'

jobs:
  test-multiplatform-build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    strategy:
      matrix:
        image:
          - name: citrineos-server
            context: ./
            dockerfile: ./Server/deploy.Dockerfile
            config: ''
          - name: citrineos-directus
            context: ./DirectusExtensions
            dockerfile: ./DirectusExtensions/directus.Dockerfile
            config: directus-env-config.cjs

    steps:
      - uses: actions/checkout@v4

      - name: Debug repository structure
        run: |
          echo "üîç Debugging repository structure..."
          echo "Current working directory: $(pwd)"
          echo ""
          echo "Repository root contents:"
          ls -la .
          echo ""
          echo "Looking for DirectusExtensions directory:"
          if [ -d "DirectusExtensions" ]; then
            echo "‚úÖ DirectusExtensions found"
            ls -la DirectusExtensions/
            echo ""
            echo "Contents of DirectusExtensions:"
            find DirectusExtensions -name "*.json" -o -name "*.cjs" -o -name "*.dockerfile" -o -name "*.Dockerfile" 2>/dev/null || echo "No matching files found"
          else
            echo "‚ùå DirectusExtensions NOT found"
            echo "Available directories:"
            find . -type d -maxdepth 2 | head -20
          fi
          echo ""
          echo "Looking for Server directory:"
          if [ -d "Server" ]; then
            echo "‚úÖ Server found"
            ls -la Server/
            echo ""
            echo "Looking for config file:"
            find Server -name "*config*" -name "*.cjs" 2>/dev/null || echo "No config files found"
          else
            echo "‚ùå Server NOT found"
          fi
          echo ""
          echo "All .cjs files in repository:"
          find . -name "*.cjs" 2>/dev/null || echo "No .cjs files found"
          echo ""
          echo "All Dockerfile files:"
          find . -name "*Dockerfile*" 2>/dev/null || echo "No Dockerfile files found"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.image.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.image.name }}-

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Extract metadata for testing
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image.name }}
          tags: |
            type=ref,event=branch,suffix=-test
            type=sha,prefix={{branch}}-,suffix=-test
          flavor: |
            latest=false

      - name: Build and push server image (test)
        if: ${{ matrix.image.name == 'citrineos-server' }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Prepare Directus build context
        if: ${{ matrix.image.name == 'citrineos-directus' }}
        run: |
          cp ./Server/directus-env-config.cjs ./DirectusExtensions/

      - name: Build and push Directus image (test)
        if: ${{ matrix.image.name == 'citrineos-directus' }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            CONFIG_FILE=${{ matrix.image.config }}

      # Move cache to avoid ever-growing cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Verify multi-platform build
      - name: Verify multi-platform images
        run: |
          echo "üîç Checking built images for multiple architectures..."
          
          readarray -t tags <<< "${{ steps.meta.outputs.tags }}"
          
          for tag in "${tags[@]}"; do
            if [[ -n "$tag" ]]; then  # Skip empty lines
              echo "Inspecting: $tag"
              docker buildx imagetools inspect "$tag"
              echo "---"
            fi 
          done 

      # Test image functionality
      - name: Test image pulls and basic functionality
        run: |
          echo "üß™ Testing image pulls and basic functionality..."
          
          readarray -t tags <<< "${{ steps.meta.outputs.tags }}"
          
          for tag in "${tags[@]}"; do
            if [[ -n "$tag" ]]; then
              echo "Testing AMD64: $tag"
              docker pull --platform linux/amd64 "$tag"
          
              echo "Testing ARM64: $tag"  
              docker pull --platform linux/arm64 "$tag"
          
              # Test that the image can run (basic smoke test)
              echo "üöÄ Running smoke test for AMD64..."
              docker run --rm --platform linux/amd64 "$tag" --help 2>/dev/null || echo "Image runs (help command may not be available)"
          
              echo "üöÄ Running smoke test for ARM64..."
              docker run --rm --platform linux/arm64 "$tag" --help 2>/dev/null || echo "Image runs (help command may not be available)"
          
              # Inspect the image to see architecture info
              echo "üìã Image details:"
              docker inspect --format='{{.Architecture}} {{.Os}}' "$tag"
          
              echo "‚úÖ Both architectures available and functional for $tag"
              echo "---"
            fi
          done
      # Advanced verification: Check image layers and sizes
      - name: Compare image sizes across architectures
        run: |
          echo "üìä Comparing image sizes across architectures..."
          
          readarray -t tags <<< "${{ steps.meta.outputs.tags }}"
          
          for tag in "${tags[@]}"; do
            if [[ -n "$tag" ]]; then
              echo "Analyzing: $tag"
          
              # Get manifest info for both architectures
              amd64_size=$(docker manifest inspect "$tag" | jq -r '.manifests[] | select(.platform.architecture=="amd64") | .size')
              arm64_size=$(docker manifest inspect "$tag" | jq -r '.manifests[] | select(.platform.architecture=="arm64") | .size')
          
              echo "  AMD64 manifest size: $amd64_size bytes"
              echo "  ARM64 manifest size: $arm64_size bytes"
              echo "---"
            fi
          done